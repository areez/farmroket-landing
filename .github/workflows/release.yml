name: Release

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run lint

      - name: Build project
        run: npm run build

      - name: Generate changelog
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          npm run changelog

      - name: Determine version bump
        id: version
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Get commits since last tag
          COMMITS=$(git log $LATEST_TAG..HEAD --oneline)
          
          # Determine version bump type
          if echo "$COMMITS" | grep -q "^[a-f0-9]\+ feat\!"; then
            echo "bump=major" >> $GITHUB_OUTPUT
          elif echo "$COMMITS" | grep -q "^[a-f0-9]\+ feat"; then
            echo "bump=minor" >> $GITHUB_OUTPUT
          elif echo "$COMMITS" | grep -q "^[a-f0-9]\+ fix"; then
            echo "bump=patch" >> $GITHUB_OUTPUT
          else
            echo "bump=none" >> $GITHUB_OUTPUT
          fi

      - name: Bump version and create release
        if: steps.version.outputs.bump != 'none'
        run: |
          # Bump version in package.json
          npm version ${{ steps.version.outputs.bump }} --no-git-tag-version
          
          # Get new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version: $NEW_VERSION"
          
          # Update changelog with new version
          npm run version
          
          # Commit changes
          git add .
          git commit -m "chore(release): v$NEW_VERSION"
          
          # Create and push tag
          git tag "v$NEW_VERSION"
          git push origin main
          git push origin "v$NEW_VERSION"

      - name: Create GitHub Release
        if: steps.version.outputs.bump != 'none'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          release_name: Release v${{ steps.version.outputs.new_version }}
          body: |
            ## Changes
            
            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for detailed changes.
            
            ## Deployment
            
            This release has been automatically deployed to production.
          draft: false
          prerelease: false

      - name: Deploy to Vercel
        if: steps.version.outputs.bump != 'none'
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          vercel-args: '--prod'